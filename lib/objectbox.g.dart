// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'db/objbox.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 3161485262557897476),
      name: 'CaseStorage',
      lastPropertyId: const IdUid(6, 6096443964003695091),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(2, 8982927949143462391),
            name: 'caseId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6185172823646127305),
            name: 'caseTitle',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4461928613302633586),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 199592008620657119),
            name: 'annotatedImagesPath',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6096443964003695091),
            name: 'id',
            type: 6,
            flags: 1)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(4, 88302784194330544),
            name: 'planes',
            targetId: const IdUid(2, 640701132895911051))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 640701132895911051),
      name: 'PlaneStorage',
      lastPropertyId: const IdUid(2, 1393743004743026692),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1097818893202289967),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1393743004743026692),
            name: 'planeType',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(3, 5897756999727749539),
            name: 'windows',
            targetId: const IdUid(3, 6161986897395975350))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 6161986897395975350),
      name: 'WindowStorage',
      lastPropertyId: const IdUid(4, 2869994128125789001),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5764473188133717405),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 2217474279285972583),
            name: 'windowType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2869994128125789001),
            name: 'imagesPath',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(3, 6161986897395975350),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(4, 88302784194330544),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [1832558261113410637, 5349300536274241000],
      retiredRelationUids: const [379523746237007951, 2330134373173620508],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    CaseStorage: EntityDefinition<CaseStorage>(
        model: _entities[0],
        toOneRelations: (CaseStorage object) => [],
        toManyRelations: (CaseStorage object) =>
            {RelInfo<CaseStorage>.toMany(4, object.caseId): object.planes},
        getId: (CaseStorage object) => object.caseId,
        setId: (CaseStorage object, int id) {
          object.caseId = id;
        },
        objectToFB: (CaseStorage object, fb.Builder fbb) {
          final caseTitleOffset = fbb.writeString(object.caseTitle);
          final descriptionOffset = fbb.writeString(object.description);
          final annotatedImagesPathOffset =
              fbb.writeString(object.annotatedImagesPath);
          fbb.startTable(7);
          fbb.addInt64(1, object.caseId);
          fbb.addOffset(2, caseTitleOffset);
          fbb.addOffset(3, descriptionOffset);
          fbb.addOffset(4, annotatedImagesPathOffset);
          fbb.addInt64(5, object.id);
          fbb.finish(fbb.endTable());
          return object.caseId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final caseIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final caseTitleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final annotatedImagesPathParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final object = CaseStorage(caseIdParam, caseTitleParam,
              descriptionParam, annotatedImagesPathParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          InternalToManyAccess.setRelInfo<CaseStorage>(object.planes, store,
              RelInfo<CaseStorage>.toMany(4, object.caseId));
          return object;
        }),
    PlaneStorage: EntityDefinition<PlaneStorage>(
        model: _entities[1],
        toOneRelations: (PlaneStorage object) => [],
        toManyRelations: (PlaneStorage object) =>
            {RelInfo<PlaneStorage>.toMany(3, object.id): object.windows},
        getId: (PlaneStorage object) => object.id,
        setId: (PlaneStorage object, int id) {
          object.id = id;
        },
        objectToFB: (PlaneStorage object, fb.Builder fbb) {
          final planeTypeOffset = fbb.writeString(object.planeType);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, planeTypeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final planeTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = PlaneStorage(planeTypeParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo<PlaneStorage>(object.windows, store,
              RelInfo<PlaneStorage>.toMany(3, object.id));
          return object;
        }),
    WindowStorage: EntityDefinition<WindowStorage>(
        model: _entities[2],
        toOneRelations: (WindowStorage object) => [],
        toManyRelations: (WindowStorage object) => {},
        getId: (WindowStorage object) => object.id,
        setId: (WindowStorage object, int id) {
          object.id = id;
        },
        objectToFB: (WindowStorage object, fb.Builder fbb) {
          final windowTypeOffset = fbb.writeString(object.windowType);
          final imagesPathOffset = fbb.writeString(object.imagesPath);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(2, windowTypeOffset);
          fbb.addOffset(3, imagesPathOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final windowTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final imagesPathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final object = WindowStorage(windowTypeParam, imagesPathParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [CaseStorage] entity fields to define ObjectBox queries.
class CaseStorage_ {
  /// see [CaseStorage.caseId]
  static final caseId =
      QueryIntegerProperty<CaseStorage>(_entities[0].properties[0]);

  /// see [CaseStorage.caseTitle]
  static final caseTitle =
      QueryStringProperty<CaseStorage>(_entities[0].properties[1]);

  /// see [CaseStorage.description]
  static final description =
      QueryStringProperty<CaseStorage>(_entities[0].properties[2]);

  /// see [CaseStorage.annotatedImagesPath]
  static final annotatedImagesPath =
      QueryStringProperty<CaseStorage>(_entities[0].properties[3]);

  /// see [CaseStorage.id]
  static final id =
      QueryIntegerProperty<CaseStorage>(_entities[0].properties[4]);

  /// see [CaseStorage.planes]
  static final planes =
      QueryRelationToMany<CaseStorage, PlaneStorage>(_entities[0].relations[0]);
}

/// [PlaneStorage] entity fields to define ObjectBox queries.
class PlaneStorage_ {
  /// see [PlaneStorage.id]
  static final id =
      QueryIntegerProperty<PlaneStorage>(_entities[1].properties[0]);

  /// see [PlaneStorage.planeType]
  static final planeType =
      QueryStringProperty<PlaneStorage>(_entities[1].properties[1]);

  /// see [PlaneStorage.windows]
  static final windows = QueryRelationToMany<PlaneStorage, WindowStorage>(
      _entities[1].relations[0]);
}

/// [WindowStorage] entity fields to define ObjectBox queries.
class WindowStorage_ {
  /// see [WindowStorage.id]
  static final id =
      QueryIntegerProperty<WindowStorage>(_entities[2].properties[0]);

  /// see [WindowStorage.windowType]
  static final windowType =
      QueryStringProperty<WindowStorage>(_entities[2].properties[1]);

  /// see [WindowStorage.imagesPath]
  static final imagesPath =
      QueryStringProperty<WindowStorage>(_entities[2].properties[2]);
}
